package main

import (
	"bytes"
	"log"
	"text/template"

	"github.com/Masterminds/sprig"
	"github.com/joshcarp/protoc-gen-stringer/stringer"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

func main() {
	protogen.Options{}.Run(GenerateFiles)
}

// includeImport returns true if the proto identified by the import path should be included in the
// generation.
func includeImport(path string) bool {
	return path != "google/protobuf/descriptor.proto"
}

// GenerateFile generates the contents of a index.sysl file.
func GenerateFiles(gen *protogen.Plugin) error {
	var buf bytes.Buffer
	funcmap := templateFuncs()
	var texttemplate = template.Must(template.New("name").Funcs(funcmap).Parse(tmpl))
	for _, filename := range gen.Request.GetFileToGenerate() {
		file := gen.FilesByPath[filename]
		if checkSkipFile(file.Enums) {
			continue
		}
		g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+"_stringer.go", file.GoImportPath)
		err := texttemplate.Execute(&buf, file)
		if err != nil {
			log.Fatal(err)
		}
		g.P(buf.String())
		buf.Reset()
	}
	return nil
}

func enum(e *protogen.Enum, val *protogen.EnumValue) string {
	return proto.GetExtension(e.Desc.Values().ByNumber(val.Desc.Number()).Options(), stringer.E_Enum).(string)
}

// enumstr returns the stringer.enum option or the name of the enum val
func enumstr(e *protogen.Enum, val *protogen.EnumValue) string {
	enumopt := proto.GetExtension(e.Desc.Values().ByNumber(val.Desc.Number()).Options(), stringer.E_Enum).(string)
	if enumopt != "" {
		return enumopt
	}
	return val.GoIdent.GoName
}

func checkSkipFile(enums []*protogen.Enum) bool {
	if len(enums) == 0 {
		return true
	}
	for _, e := range enums {
		if doEnum(e) {
			return false
		}
	}
	return true
}

func doEnum(e *protogen.Enum) bool {
	for _, enumval := range e.Values {
		if enum(e, enumval) != "" {
			return true
		}
	}
	return false
}

func templateFuncs() template.FuncMap {
	funcmap := template.FuncMap(sprig.FuncMap())
	funcmap["enumstr"] = enumstr
	funcmap["includeImport"] = includeImport
	funcmap["checkSkipFile"] = checkSkipFile
	funcmap["doEnum"] = doEnum
	return funcmap
}

const tmpl = `// Code generated by protoc-gen-stringer. DO NOT EDIT.
// source: {{.Proto.Name}}
package {{.GoPackageName}}
{{ range $i, $e := .Enums }}{{if (doEnum $e)}}


var enumStringMap{{.GoIdent.GoName}}_string = map[{{.GoIdent.GoName}}]string{ {{range $ii, $ee := $e.Values}}
	{{.GoIdent.GoName}}: "{{enumstr $e $ee}}",{{end}}
}

var enumStringVar{{.GoIdent.GoName}}_val = map[string]{{.GoIdent.GoName}}{ {{range $ii, $ee := $e.Values}}
	"{{enumstr $e $ee}}": {{.GoIdent.GoName}},{{end}}
}

func (i {{.GoIdent.GoName}}) StringVal() string {
	return enumStringMap{{.GoIdent.GoName}}_string[i]
}

func StringTo{{.GoIdent.GoName}}(s string) ({{.GoIdent.GoName}}, bool) {
	val, ok := enumStringVar{{.GoIdent.GoName}}_val[s]
	return val, ok
}
{{end}}{{end}}`
