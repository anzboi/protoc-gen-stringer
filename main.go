package main

import (
	"bytes"
	"log"
	"text/template"

	"github.com/Masterminds/sprig"
	"github.com/joshcarp/protoc-gen-stringer/stringerpb"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

func main() {
	protogen.Options{}.Run(GenerateFiles)
}

// includeImport returns true if the proto identified by the import path should be included in the
// generation.
func includeImport(path string) bool {
	return path != "google/protobuf/descriptor.proto"
}

// GenerateFile generates the contents of a index.sysl file.
func GenerateFiles(gen *protogen.Plugin) error {
	var buf bytes.Buffer
	funcmap := templateFuncs()
	var texttemplate = template.Must(template.New("name").Funcs(funcmap).Parse(tmpl))
	for _, filename := range gen.Request.GetFileToGenerate() {
		file := gen.FilesByPath[filename]
		g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+"_stringer.go", file.GoImportPath)
		err := texttemplate.Execute(&buf, file)
		if err != nil {
			log.Fatal(err)
		}
		g.P(buf.String())
		buf.Reset()
	}
	return nil
}

func enum(e *protogen.Enum, val *protogen.EnumValue) string {
	return proto.GetExtension(e.Desc.Values().ByNumber(val.Desc.Number()).Options(), stringerpb.E_StringVal).(string)
}

func templateFuncs() template.FuncMap {
	funcmap := template.FuncMap(sprig.FuncMap())
	funcmap["enum"] = enum
	funcmap["includeImport"] = includeImport
	return funcmap
}

const tmpl = `// Code generated by protoc-gen-stringer. DO NOT EDIT.
// source: {{.Proto.Name}}
package {{.GoPackageName}}
import "fmt"
{{ range $i, $e := .Enums }}
{{ $stringvar := (printf "%s%s" "enumStringVar" .GoIdent.GoName) }}
const enumStringVar{{.GoIdent.GoName}} = "{{range $ii, $ee := $e.Values}}{{enum $e $ee}}{{end}}"
{{ $indexvar := (printf "%s%s" "enumStringVarIndex" .GoIdent.GoName) }} 
var {{$indexvar}} = [...]uint8{ {{$lastindex := 0}}{{range $ii, $ee := $e.Values}}{{$lastindex}}, {{$lastindex = add (len (enum $e  $ee)) $lastindex}}{{end}} {{$lastindex}} }
func (i {{.GoIdent.GoName}}) StringVal() string {
	if i < 0 || i+1 >= {{.GoIdent.GoName}}(len({{$indexvar}})) {
		return fmt.Sprintf("%d", i)
	}
	return {{$stringvar}}[{{$indexvar}}[i]:{{$indexvar}}[i+1]]
}
func StringTo{{.GoIdent.GoName}}(s string) {{.GoIdent.GoName}} {
	switch s { {{range $ii, $ee := $e.Values}}
	case "{{enum $e $ee}}":
		return {{.GoIdent.GoName}}{{end}}
	default:
		return 0
	}
}
{{end}}`

//
//// Code generated by protoc-gen-stringer. DO NOT EDIT.
//
//package {{.GoPackageName}}
//
//import "fmt"
//{{range $j, $filename := .Request.GetFileToGenerate}}
//{{$file := index .FilesByPath $filename}}{{if includeImport $file.Proto.GetName}}
//{{ range $i, $e := .Enums }}
//{{ $stringvar := (printf "%s%s" "enumStringVar" .GoIdent.GoName) }}
//const enumStringVar{{.GoIdent.GoName}} = "{{range $ii, $ee := $e.Values}}{{enum $e $ee}}{{end}}"
//{{ $indexvar := (printf "%s%s" "enumStringVarIndex" .GoIdent.GoName) }}
//var {{$indexvar}} = [...]uint8{ {{$lastindex := 0}}{{range $ii, $ee := $e.Values}}{{$lastindex}}, {{$lastindex = add (len (enum $e  $ee)) $lastindex}}{{end}} {{$lastindex}} }
//
//func (i {{.GoIdent.GoName}}) StringVal() string {
//	if i < 0 || i+1 >= {{.GoIdent.GoName}}(len({{$indexvar}})) {
//		return fmt.Sprintf("%d", i)
//	}
//	return {{$stringvar}}[{{$indexvar}}[i]:{{$indexvar}}[i+1]]
//}
//
//func StringTo{{.GoIdent.GoName}}(s string) {{.GoIdent.GoName}} {
//	switch s { {{range $ii, $ee := $e.Values}}
//	case "{{enum $e $ee}}":
//		return {{.GoIdent.GoName}}{{end}}
//	default:
//		return 0
//	}
//}
//{{end}}
//{{end}}
//{{end}}
//`
